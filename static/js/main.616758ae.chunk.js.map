{"version":3,"sources":["Drawer.js","ToggleBox.js","Vehicles.js","Cuerpo.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","list","width","fullList","TemporaryDrawer","classes","React","useState","top","left","bottom","right","state","setState","toggleDrawer","side","open","event","type","key","handleClick","e","console","log","Button","onClick","Drawer","onClose","className","role","onKeyDown","List","map","text","index","ListItem","button","ListItemIcon","ListItemText","primary","Divider","ToggleBox","props","opened","toggleBox","bind","this","title","children","class","Component","table","minWidth","createData","name","calories","fat","carbs","protein","rows","Vehicles","TableContainer","component","Paper","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","row","scope","Saludo","greeting","App","greet","setGreet","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.616758ae.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Button from '@material-ui/core/Button';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\nimport { useState } from 'react';\r\n\r\nconst useStyles = makeStyles({\r\n  list: {\r\n    width: 250,\r\n  },\r\n  fullList: {\r\n    width: 'auto',\r\n  },\r\n});\r\n\r\nexport default function TemporaryDrawer() {\r\n  const classes = useStyles();\r\n  const [state, setState] = React.useState({\r\n    top: false,\r\n    left: false,\r\n    bottom: false,\r\n    right: false,\r\n  });\r\n\r\n  const toggleDrawer = (side, open) => event => {\r\n    if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\r\n      return;\r\n    }\r\n\r\n    setState({ ...state, [side]: open });\r\n  };\r\n\r\n  const sideList = side => (\r\n    <div\r\n      className={classes.list}\r\n      role=\"presentation\"\r\n      onClick={toggleDrawer(side, false)}\r\n      onKeyDown={toggleDrawer(side, false)}\r\n    >\r\n      <List>\r\n        {['Inbox', 'Starred', 'Send email', 'Drafts'].map((text, index) => (\r\n          <ListItem button key={text}>\r\n            <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\r\n            <ListItemText primary={text} />\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n      <Divider />\r\n      <List>\r\n        {['All mail', 'Trash', 'Spam'].map((text, index) => (\r\n          <ListItem button key={text}>\r\n            <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\r\n            <ListItemText primary={text} />\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n    </div>\r\n  );\r\n\r\n  const fullList = side => (\r\n    <div\r\n      className={classes.fullList}\r\n      role=\"presentation\"\r\n      onClick={toggleDrawer(side, false)}\r\n      onKeyDown={toggleDrawer(side, false)}\r\n    >\r\n      <List>\r\n        {['Inbox', 'Starred', 'Send email', 'Drafts'].map((text, index) => (\r\n          <ListItem button key={text} onClick={handleClick}>\r\n            <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\r\n            <ListItemText primary={text} />\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n      <Divider />\r\n      <List>\r\n        {['All mail', 'Trash', 'Spam'].map((text, index) => (\r\n          <ListItem button key={text}>\r\n            <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\r\n            <ListItemText primary={text} />\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n    </div>\r\n  );\r\n\r\n  function handleClick(e) {\r\n    console.log('The link was clicked.');\r\n  }\r\n\r\n  const [count, setCount] = useState(0);\r\n\r\n  return (\r\n    <div>\r\n      <Button onClick={handleClick(), toggleDrawer('left', true)}>Open Drawer</Button>\r\n\r\n      <Drawer open={state.left} onClose={toggleDrawer('left', false)}>\r\n        {sideList('left')}\r\n      </Drawer>\r\n\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nclass ToggleBox extends React.Component {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\topened: false,\r\n\t\t};\r\n\t\tthis.toggleBox = this.toggleBox.bind(this);\r\n\t}\r\n  \r\n\ttoggleBox() {\r\n\t\tconst { opened } = this.state;\r\n\t\tthis.setState({\r\n\t\t\topened: !opened,\r\n\t\t});\r\n\t}\r\n  \r\n\trender() {\r\n\t\tvar { title, children } = this.props;\r\n\t\tconst { opened } = this.state;\r\n\r\n\t\tif (opened){\r\n\t\t\ttitle ='Adios Tabla';\r\n\t\t}else{\r\n\t\t\ttitle ='Mostrar Tabla';\r\n\t\t}\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"box\">\r\n\t\t\t\t<div className=\"boxTitle\" onClick={this.toggleBox}>\r\n\t\t\t\t\t{title}\r\n\t\t\t\t</div>\r\n\t\t\t\t{opened && (\t\t\t\t\t\r\n\t\t\t\t\t<div class=\"boxContent\">\r\n\t\t\t\t\t\t{children}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default ToggleBox;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 650,\r\n  },\r\n});\r\n\r\nfunction createData(name, calories, fat, carbs, protein) {\r\n  return { name, calories, fat, carbs, protein };\r\n}\r\n\r\nconst rows = [\r\n  createData('Frozen yoghurt', 159, 6.0, 24, 4.0),\r\n  createData('Ice cream sandwich', 237, 9.0, 37, 4.3),\r\n  createData('Eclair', 262, 16.0, 24, 6.0),\r\n  createData('Cupcake', 305, 3.7, 67, 4.3),\r\n  createData('Gingerbread', 356, 16.0, 49, 3.9),\r\n];\r\n\r\nexport default function Vehicles() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table className={classes.table} aria-label=\"simple table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>Dessert (100g serving)</TableCell>\r\n            <TableCell align=\"right\">Calories</TableCell>\r\n            <TableCell align=\"right\">Fat&nbsp;(g)</TableCell>\r\n            <TableCell align=\"right\">Carbs&nbsp;(g)</TableCell>\r\n            <TableCell align=\"right\">Protein&nbsp;(g)</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {rows.map(row => (\r\n            <TableRow key={row.name}>\r\n              <TableCell component=\"th\" scope=\"row\">\r\n                {row.name}\r\n              </TableCell>\r\n              <TableCell align=\"right\">{row.calories}</TableCell>\r\n              <TableCell align=\"right\">{row.fat}</TableCell>\r\n              <TableCell align=\"right\">{row.carbs}</TableCell>\r\n              <TableCell align=\"right\">{row.protein}</TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { Component } from 'react';\r\n\r\nclass Saludo extends Component {\r\n    \r\n    render() {\r\n      return <h1>{this.props.greeting}</h1>;\r\n    }\r\n  }\r\n  \r\n  export default Saludo;\r\n\r\n","import React from 'react';\nimport './App.css';\nimport { useState } from 'react';\nimport Drawer from './Drawer.js';\nimport ToggleBox from \"./ToggleBox\";\nimport Vehicles from \"./Vehicles\";\nimport Saludo from './Cuerpo';\n\n\nfunction App() {\n\n  const [greet, setGreet] = useState(':D');\n\n  function saludo(){\n    if(greet === ':D') {\n      setGreet('D:');   \n    }else{\n      setGreet(':D');\n    }\n  }\n\n  return (\n    <div className=\"App\">\n\n      <Saludo greeting={greet}/>\n      <Drawer />\n      <div>\n        <button onClick={() => saludo()}>\n          Click me\n        </button>\n      </div>\n      <div>\n      <ToggleBox title=\"Mostrar Tabla\">\n\t\t\t\t<Vehicles />\n\t\t\t</ToggleBox>\n      </div>\n    </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}